name: CI variants
run-name: test-run-name-build-test
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      name:
        description: Variant name
        required: true
        type: string
      filter-tags:
        description: Regex pattern to filter CloudNativePG PostgreSQL image tags
        type: string
permissions:
  actions: read
  contents: read
  security-events: write
jobs:
  get-digests:
    name: Get digests
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    outputs:
      digests: ${{ steps.get-digests.outputs.digests }}
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - id: get-digests
      name: Get digests
      run: |
        ./scripts/get_digests.sh
        digests_json=$(jq -c '.' output/digests.json)
        printf "digests=%s\n" "${digests_json}" >>"${GITHUB_OUTPUT:?}"
      env:
        FILTER_TAGS: ${{ inputs.filter-tags }}
        COMPARE_REPOSITORY: czetech/cloudnativepg-postgresql
        COMPARE_TAG_SUFFIX: ${{ inputs.name }}
    - name: Upload digests to artifacts
      uses:
        # yamllint disable-line rule:line-length
        actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882  # v4.4.3
      with:
        name: digests-${{ inputs.name }}
        path: output
        if-no-files-found: error
  image:
    name: Build image
    permissions:
      actions: read
      contents: read
      security-events: write
    needs: get-digests
    if: ${{ needs.get-digests.outputs.digests != '[]' }}
    runs-on: ubuntu-24.04
    env:
      IMAGE: ${{ vars.IMAGE_REPOSITORY }}:test
      POSTGRESQL_DIGEST: ${{ matrix.digest.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
    - name: Set up QEMU
      uses:
        # yamllint disable-line rule:line-length
        docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf  # v3.2.0
    - name: Set up Docker Buildx
      uses:
        # yamllint disable-line rule:line-length
        docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349  # v3.7.1
    - name: Build image
      uses:
        # yamllint disable-line rule:line-length
        docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355  # v6.10.0
      with:
        build-args: POSTGRESQL_DIGEST
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: variants/${{ inputs.name }}
        load: true
        tags: ${{ env.IMAGE }}
    - name: Lint image with Dockle
      uses:
        erzz/dockle-action@69369bc745ee29813f730231a821bcd4f71cd290  # v1.4.0
      with:
        image: ${{ env.IMAGE }}
        dockle-version: 0.4.14
        accept-keywords: key
        accept-filenames: >-
          usr/local/lib/python3.11/dist-packages/azure/core/settings.py,
          usr/local/lib/python3.9/dist-packages/azure/core/settings.py
    - name: Scan image with Trivy
      uses:
        # yamllint disable-line rule:line-length
        aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0  # 0.29.0
      with:
        image-ref: ${{ env.IMAGE }}
        format: sarif
        output: trivy.sarif
        scanners: vuln,secret,misconfig,license
    - name: Upload Trivy results
      uses:
        # yamllint disable-line rule:line-length
        github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169  # v3.28.0
      with:
        sarif_file: trivy.sarif
        category: trivy
    - name: Test image
      run: "\"./variants/${VARIANT:?}/test_image.sh\""
      env:
        VARIANT: ${{ inputs.name }}
      timeout-minutes: 1
    strategy:
      matrix:
        digest: ${{ fromJSON(needs.get-digests.outputs.digests) }}
      fail-fast: false
